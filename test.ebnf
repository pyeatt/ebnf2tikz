newlines =
 a \\ b \\ c;

 otherb =
   (a, b) \\ (c, d, e), (f) \\ {g,  h, i, j}  \\ [k, l, m] \\ (n, o  );


simple =
         [ a  | b | c | d ] ;

simple =
  b, { a , b } ;

character_literal =
    "'", graphic_character, "'" ;

 optionchoice =
  b,  [ a | b ], c;

<<-- caption "Syntax for the case statement." -->>
case_statement =
    [ label, ':' ], 'case', expression, 'is' \\  case_statement_alternative,
    { ',' , case_statement_alternative } \\
    'end', 'case', [ label ] ,';' ;

<<-- subsume as "case_statement_alternative";
caption "Syntax for the case statement alternawive" -->>
case_statement_alternative =
    'when' , choices , '=>', sequence_of_statements;
    
<<-- subsume as "choice" -->>
choice =
    simple_expression |
    discrete_range |
    simple_name |
    'others' ;

<<-- subsume as "choices"; caption "choices" -->>
choices =
    choice, { '|', choice } ;


toollist =
 '(' \\ tool, { ',', tool } \\ ')';

<<-- subsume as "tool" -->>
tool =
  'hammer' | 'screwdriver' | saw;

<<-- subsume as "saw" -->>
saw =
   ('hand'  | ( [ 'cordless'] , ('reciprocating' | 'circular' ) , 'power' ) ),'saw';

nolist=
  a , b , [c , "d" ] , e , f ;

list =
  a, 'b', c \\  this | that_one | 'and' ,  the, other;

list =
  a, 'b', (c , this | that_one,  'and',   the ),other;



listx =
  a , ( 'b' | c , ( this | { that_one | 'and' }  |   the )),other;

listj =
  a , (  'b' | c | (this , that_one ) | 'and'|   the ),  other;

listk =
  a  ,(  'b'  | c | "none" ,{  (this , that_one) | other_one | "none"  } | 'and'|
  the ), other ;

hmm =
    a, (that_one | other_one | "none") ,other ;

aawesome_list =
  a , ( 'b' | c | (( this , [that_one | 'this one' ]) | ( other_one |
  ('and'|   the |"bout"))  | "neither") ),
  other;

grammar = { rule } ;

other =
  (((a, b), [ c, d, e, f, g , h, i, j ] ), (k, l, m), (n, o ) );


easyone =
[ a | b];

 a_better_loop =
  a, [{a}];
 
 a_better_loopb =
  a, [{b}];

a_much_better_loop =
 a, [{  ',', a}];


a_much_better_loop =
 	x ,   a, b, {  ',',  a, b};



wowzer =
 	x  ,  a, b, [{  blue, ',',  'part', a,  b, g}];

gleep =
 	x  ,  a, b, [{  ',',  a, b}], right;


muckrake =
 	x  ,  a, b, [{  blue, ',',  a, b}], 'toodles';

broken =
 	x  ,  a, b, [{x}];

scooby =
  	[{  blue, ',',  'part', a, (b | g)}];

scooby =
   	x,    a, b,[{  blue, ',' , 'part', a, (b | g)}];

muckrake =
 	x ,  ( a|b), [{  blue, ',',  (a| b)}], 'toodles';


